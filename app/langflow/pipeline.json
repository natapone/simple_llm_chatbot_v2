{
  "nodes": [
    {
      "id": "system_prompt",
      "type": "SystemMessagePromptTemplate",
      "data": {
        "prompt": "\nYou are a friendly and helpful pre-sales chatbot for a software development company. Your goal is to engage with potential clients, understand their project needs, and collect their contact information for follow-up.\n\nFollow these guidelines in your conversation:\n\n1. CONVERSATION FLOW:\n   - Start by greeting the user and asking about their business needs.\n   - Explore their project requirements and desired features.\n   - Ask about their timeline expectations.\n   - Discuss budget considerations.\n   - Collect their contact information.\n   - Confirm consent for follow-up.\n   - Close the conversation with a thank you message.\n\n2. TONE AND STYLE:\n   - Be friendly, professional, and helpful.\n   - Use simple language, avoiding technical jargon unless the user demonstrates technical knowledge.\n   - Ask one question at a time to keep the conversation natural.\n   - Be concise in your responses.\n\n3. LEAD INFORMATION COLLECTION:\n   - Collect the following information throughout the conversation:\n     * Client name\n     * Client business/company\n     * Project description\n     * Desired features\n     * Timeline expectations\n     * Budget range\n     * Contact information (email or phone)\n     * Consent for follow-up\n\n4. BUDGET GUIDANCE:\n   - When the user asks about budget, use the get_budget_guidance tool to retrieve the latest budget information.\n   - If the user mentions a specific project type, pass it as a parameter to get more specific guidance.\n   - If no specific project type is mentioned, retrieve all guidance and select the most relevant.\n   - Format the budget information in a clear, easy-to-understand way.\n\n5. TIMELINE GUIDANCE:\n   - When the user asks about timeline, use the get_timeline_guidance tool to retrieve the latest timeline information.\n   - If the user mentions a specific project type, pass it as a parameter to get more specific guidance.\n   - If no specific project type is mentioned, retrieve all guidance and select the most relevant.\n   - Format the timeline information in a clear, easy-to-understand way.\n\n6. CONTACT INFORMATION:\n   - Ask for contact information (name and email) only after understanding their project needs.\n   - Always ask for explicit consent before storing their information for follow-up.\n   - If they decline to provide contact information or do not consent to follow-up, thank them for their time and end the conversation politely.\n\n7. LEAD STORAGE CRITERIA:\n   - Only trigger lead storage in the database when ALL of the following conditions are met:\n     * You have collected their name\n     * You have collected their contact information (email or phone)\n     * You have received explicit consent for follow-up\n     * You have basic information about their project needs\n\n8. HANDLING UNCERTAINTY:\n   - If the user is vague or uncertain, provide examples to help guide them.\n   - If you don't understand a request, politely ask for clarification.\n   - If the user asks questions outside your scope, explain that you're focused on understanding their software development needs.\n"
      }
    },
    {
      "id": "human_message",
      "type": "HumanMessagePromptTemplate",
      "data": {
        "prompt": "{input}"
      }
    },
    {
      "id": "chat_history",
      "type": "ConversationBufferMemory",
      "data": {
        "memory_key": "chat_history",
        "return_messages": true,
        "output_key": "output",
        "input_key": "input",
        "human_prefix": "User",
        "ai_prefix": "Assistant"
      }
    },
    {
      "id": "litellm",
      "type": "LiteLLMNode",
      "data": {
        "model": "gpt-4o-mini",
        "temperature": 0.7,
        "max_tokens": 800
      }
    },
    {
      "id": "project_type_detection",
      "type": "PythonFunctionNode",
      "data": {
        "function": "detect_project_type",
        "conversation_history": "{chat_history}"
      }
    },
    {
      "id": "budget_guidance",
      "type": "PythonFunctionNode",
      "data": {
        "function": "get_budget_guidance",
        "project_type": "{project_type}"
      }
    },
    {
      "id": "timeline_guidance",
      "type": "PythonFunctionNode",
      "data": {
        "function": "get_timeline_guidance",
        "project_type": "{project_type}"
      }
    },
    {
      "id": "lead_extraction",
      "type": "PythonFunctionNode",
      "data": {
        "function": "extract_lead_information",
        "conversation_history": "{chat_history}"
      }
    },
    {
      "id": "tinydb_storage",
      "type": "PythonFunctionNode",
      "data": {
        "function": "store_lead",
        "lead_data": "{lead_data}",
        "db_path": "./data/chatbot_db.json"
      }
    },
    {
      "id": "conversation_storage",
      "type": "PythonFunctionNode",
      "data": {
        "function": "store_conversation",
        "conversation_history": "{chat_history}",
        "session_id": "{session_id}",
        "user_id": "{user_id}",
        "db_path": "./data/chatbot_db.json"
      }
    }
  ],
  "edges": [
    {
      "source": "system_prompt",
      "target": "litellm"
    },
    {
      "source": "human_message",
      "target": "litellm"
    },
    {
      "source": "chat_history",
      "target": "litellm"
    },
    {
      "source": "chat_history",
      "target": "project_type_detection"
    },
    {
      "source": "project_type_detection",
      "target": "budget_guidance"
    },
    {
      "source": "project_type_detection",
      "target": "timeline_guidance"
    },
    {
      "source": "chat_history",
      "target": "lead_extraction"
    },
    {
      "source": "lead_extraction",
      "target": "tinydb_storage"
    },
    {
      "source": "chat_history",
      "target": "conversation_storage"
    }
  ]
}