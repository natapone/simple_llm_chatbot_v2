# Simple LLM Chatbot v2 - Project Information

## Project Overview
A pre-sales chatbot that engages with potential clients to collect lead information through natural conversation. The chatbot uses LangFlow for conversation flow, LiteLLM for language model integration, and Firebase for lead storage.

## Project Structure
```
simple_llm_chatbot_v2/
├── app/
│   ├── main.py              # FastAPI application
│   ├── langflow_handler.py  # LangFlow integration
│   ├── firebase_handler.py  # Firebase integration
│   ├── guidance_tools.py    # Budget and timeline guidance tools
│   ├── chat_handler.py      # Chat processing logic
│   └── config.py            # Configuration settings
├── static/                  # Simple CSS and JS files
├── templates/               # HTML template for chat interface
├── langflow/                # LangFlow pipeline export
├── docs/                    # Documentation
│   ├── design/              # Design documentation
│   │   ├── mvp_design.md            # MVP design overview
│   │   ├── conversation_flow.md     # Detailed conversation flow
│   │   ├── data_schema.md           # Firebase data schema
│   │   ├── firebase_integration.md  # Firebase setup and integration
│   │   ├── guidance_retrieval.md    # Dynamic guidance tools
│   │   ├── system_prompt.md         # LLM system prompt
│   │   └── langflow_pipeline.md     # LangFlow pipeline design
│   ├── development/         # Development documentation
│   │   └── python311_typing.md      # Python 3.11 typing features
│   ├── api/                 # API documentation
│   └── usage/               # Usage guides
├── .env.example             # Example environment variables
├── .gitignore               # Git ignore file
├── project_info.txt         # This file
├── requirements.txt         # Python dependencies
└── README.md                # Setup instructions
```

## Technology Stack
- **Backend**: Python 3.11, FastAPI
- **LLM Integration**: LiteLLM, LangFlow
- **Database**: Firebase Firestore
- **Frontend**: HTML, CSS, JavaScript (minimal)

## Changelog

### [2023-03-07] - Design Phase Completion
- Completed all design documentation
- Finalized conversation flow design with standard and non-standard project handling
- Completed data schema design for all Firebase collections
- Finalized LangFlow pipeline design with guidance tool integration
- Added detailed implementation code examples
- Project ready for development phase

### [2023-03-06] - Python 3.11 Compatibility
- Updated requirements.txt for Python 3.11 compatibility
- Added Python 3.11 specific setup instructions
- Enhanced type hints to leverage Python 3.11 features

### [2023-03-05] - Added Dynamic Guidance Retrieval
- Created Firebase collections for budget and timeline guidance
- Implemented tool-based approach for retrieving guidance data
- Updated system prompt to use guidance tools
- Added documentation for guidance retrieval design

### [2023-03-04] - Initial Setup
- Created project directory structure
- Added project_info.txt
- Created documentation files

## Firebase Collections
The following collections will be used in Firebase:
- **leads**: Stores lead information collected from conversations
- **budget_guidance**: Stores budget ranges for different project types
- **timeline_guidance**: Stores timeline estimates for different project types
- **conversations**: Stores complete conversation histories

## Environment Variables
The following environment variables will be required:
- FIREBASE_CREDENTIALS_PATH: Path to Firebase service account JSON file
- LANGFLOW_API_URL: URL to LangFlow API (if using hosted instance)
- LLM_API_KEY: API key for the language model provider
- LLM_PROVIDER: Provider name (e.g., "openai", "anthropic")
- LLM_MODEL: Model name (e.g., "gpt-4o-mini", "claude-3-sonnet")
- PORT: Server port (default: 8000)
- HOST: Server host (default: 0.0.0.0)
- DEBUG: Debug mode (True/False)
- SESSION_EXPIRY_MINUTES: Chat session expiry time in minutes

## Python Version
This project is designed to work with Python 3.11. It leverages Python 3.11's improved performance, error reporting, and typing features.

## Development Status
The project is now ready for development. All design documents have been completed and reviewed. The next steps are:

1. Set up the development environment with Python 3.11
2. Create the Firebase project and collections
3. Implement the core components (Firebase handler, guidance tools)
4. Create the LangFlow pipeline
5. Develop the FastAPI backend
6. Build the frontend chat interface
7. Test the complete system

## Implementation Priorities
1. Core functionality (conversation flow, lead collection)
2. Firebase integration for lead storage
3. Dynamic guidance retrieval
4. Error handling and edge cases
5. Frontend enhancements

## Testing Strategy
- Unit tests for individual components
- Integration tests for Firebase and LangFlow connections
- End-to-end tests for complete conversation flows
- Manual testing with example conversations 