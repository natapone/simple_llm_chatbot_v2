# Simple LLM Chatbot v2

## Project Information

### Project Overview
This is a simple chatbot application built with Python, FastAPI, and TinyDB. The chatbot is designed to assist with pre-sales inquiries for a software development company, providing guidance on budgets and timelines for different types of projects.

### Project Structure
- `/app`: Core application code
  - `main.py`: FastAPI application entry point
  - `chat_handler.py`: Handles chat messages and conversation flow
  - `llm_handler.py`: Interfaces with language models via LiteLLM
  - `database_handler.py`: Manages TinyDB database operations
  - `guidance_tools.py`: Tools for retrieving budget and timeline guidance
  - `db_init.py`: Initializes the database with seed data
  - `/langflow`: LangFlow integration components
  - `/handlers`: Additional handler modules
  - `/templates`: HTML templates for the web interface
  - `/static`: Static files for the web interface
- `/data`: Data storage
  - `seed_data.json`: Seed data for initializing the database
  - `chatbot_db.json`: TinyDB database file
- `/docs`: Documentation
  - `/api`: API documentation
  - `/design`: Design documentation
  - `/test`: Test documentation
  - `/development`: Development documentation
  - `/usage`: Usage documentation
- `/tests`: Test files
  - `test_tinydb.py`: Test script for TinyDB implementation
  - `/unit`: Unit tests
    - `test_chat_handler.py`: Tests for the chat handler
    - `test_guidance_tools.py`: Tests for the guidance tools
    - `test_database_handler.py`: Tests for the database handler
  - `/integration`: Integration tests
    - `test_llm_integration.py`: Tests for LLM integration
    - `test_database_integration.py`: Tests for database integration
    - `test_api_endpoints.py`: Tests for API endpoints
    - `test_langflow_integration.py`: Tests for LangFlow integration
  - `/e2e`: End-to-end tests
    - `test_chat_flow.py`: Tests for the complete chat flow
    - `test_chatbot_server.py`: Tests for the chatbot server
    - `test_chat_client.py`: Tests for the chat client
  - `conftest.py`: Pytest configuration and fixtures
  - `README.md`: Documentation for the test suite
- `/venv`: Python virtual environment (Python 3.11)
- `.env`: Environment variables (created from .env.example)
- `.env.example`: Example environment variables
- `requirements.txt`: Project dependencies

### Key Features
- Natural language conversation with users
- Budget and timeline guidance for different project types
- Lead information extraction from conversations
- Persistent storage of leads and conversations
- Web interface for interacting with the chatbot

### Technologies Used
- Python 3.11
- FastAPI
- TinyDB
- LiteLLM
- Jinja2 Templates
- HTML/CSS/JavaScript

### Environment Variables
- `LLM_API_KEY`: API key for the LLM provider (OpenAI, Anthropic, etc.)
- `LLM_PROVIDER`: Provider to use (default: openai)
- `LLM_MODEL`: Model to use (default: gpt-4o-mini)
- `TINYDB_PATH`: Path to TinyDB database file
- `LANGFLOW_API_URL`: URL for the LangFlow API
- `PORT`: Port for the FastAPI server
- `HOST`: Host for the FastAPI server
- `DEBUG`: Debug mode for the FastAPI server
- `SESSION_EXPIRY_MINUTES`: Session expiry time in minutes

## Changelog

### 2025-03-04
- Initial project setup
- Created FastAPI application structure
- Implemented basic chat handler

### 2025-03-05
- Added LiteLLM integration
- Implemented conversation history management
- Created web interface
- Added budget and timeline guidance tools
- Implemented lead extraction logic
- Added TinyDB integration for data persistence
- Added unit and integration tests
- Improved error handling
- Enhanced documentation
- Removed Firebase-related files and dependencies
- Updated environment variable handling
- Improved error logging
- Fixed database initialization issues
- Improved path handling for database files
- Enhanced logging for better debugging
- Updated all documentation files to replace Firebase references with TinyDB
- Renamed firebase_integration.md to tinydb_integration.md
- Updated test files to use DatabaseHandler instead of FirebaseHandler
- Added test_langflow.py script for verifying LangFlow pipeline setup
- Created .env.example file with sample configurations
- Updated lead extraction test to better handle pattern matching
- Enhanced lead extraction using LiteLLM for entity extraction instead of regex patterns
- Added mock for LiteLLM entity extraction in tests for more reliable testing

### 2025-03-06
- Created leads dashboard page for viewing and managing leads
- Added navigation between chat interface and leads dashboard
- Reorganized test files into proper test directories
- Removed redundant test files from app directory
- Created comprehensive test documentation in tests/README.md
- Updated project_info.txt to reflect the new test organization
- Improved test structure with proper pytest fixtures and assertions
- Enhanced error handling in database operations
- Improved conversation history management
- Added proper session persistence across multiple interactions
- Fixed issues with budget and timeline guidance retrieval
- Improved the chat interface with better styling and user experience
- Added lead statistics to the dashboard
- Enhanced the system prompt for better responses
- Optimized database queries for better performance
- Added comprehensive error handling for API endpoints

## Getting Started

### Prerequisites
- Python 3.11 or higher
- API key for OpenAI or other LLM provider

### Installation
1. Clone the repository
2. Create a virtual environment: `python -m venv venv`
3. Activate the virtual environment:
   - Windows: `venv\Scripts\activate`
   - Unix/MacOS: `source venv/bin/activate`
4. Install dependencies: `pip install -r requirements.txt`
5. Copy `.env.example` to `.env` and update with your API keys
6. Initialize the database: `python app/db_init.py`

### Running the Application
1. Start the server: `uvicorn app.main:app --reload`
2. Open a web browser and navigate to `http://localhost:8000`

### Running Tests
- Run all tests: `pytest`
- Run unit tests: `pytest tests/unit`
- Run integration tests: `pytest tests/integration`
- Run end-to-end tests: `pytest tests/e2e`
- Run with coverage report: `pytest --cov=app`
- Run with verbose output: `pytest -v`
- Run with log output: `pytest --log-cli-level=INFO`

For more detailed information about the test suite, see the README.md file in the tests directory.

## Requirements
- Python 3.11
- FastAPI
- Uvicorn
- LiteLLM
- TinyDB
- Pydantic
- LangFlow

## Development Roadmap
1. Environment Setup (Completed)
2. Core Components Implementation (Completed)
   - Implement chat handler
   - Implement TinyDB integration
   - Implement guidance tools
3. LangFlow Pipeline Setup (Completed)
4. FastAPI Backend Development (Completed)
5. Frontend Implementation (Completed)
6. Testing and Refinement (Completed)
7. Future Enhancements (Planned)
   - Add user authentication
   - Implement multi-language support
   - Add analytics dashboard
   - Integrate with CRM systems

## Notes
- The project uses Python 3.11 for compatibility with all dependencies
- LiteLLM is used for LLM integration
- TinyDB is used for local data storage
- FastAPI is used for the backend
- LangFlow is used for the pipeline implementation
- Database files are excluded from version control to prevent conflicts
- Seed data is provided for initial database setup
- API keys must be set in the .env file before running the application
- The .env.example file provides a template for required environment variables 