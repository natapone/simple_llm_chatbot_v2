# Simple LLM Chatbot v2

## Project Information

### Project Overview
This is a simple chatbot application built with Python, FastAPI, and TinyDB. The chatbot is designed to assist with pre-sales inquiries for a software development company, providing guidance on budgets and timelines for different types of projects.

### Project Structure
- `/app`: Core application code
  - `main.py`: FastAPI application entry point
  - `chat_handler.py`: Handles chat messages and conversation flow
  - `llm_handler.py`: Interfaces with language models via LiteLLM
  - `database_handler.py`: Manages TinyDB database operations
  - `guidance_tools.py`: Tools for retrieving budget and timeline guidance
  - `db_init.py`: Initializes the database with seed data
- `/data`: Data storage
  - `seed_data.json`: Seed data for initializing the database
  - `chatbot_db.json`: TinyDB database file
- `/docs`: Documentation
  - `/api`: API documentation
  - `/design`: Design documentation
  - `/test`: Test documentation
  - `/development`: Development documentation
  - `/usage`: Usage documentation
- `/tests`: Test code
  - `/unit`: Unit tests
  - `/integration`: Integration tests
  - `/e2e`: End-to-end tests
- `/static`: Static files for the web interface
- `/templates`: HTML templates for the web interface

### Key Features
- Natural language conversation with users
- Budget and timeline guidance for different project types
- Lead information extraction from conversations
- Persistent storage of leads and conversations
- Web interface for interacting with the chatbot

### Technologies Used
- Python 3.11
- FastAPI
- TinyDB
- LiteLLM
- Jinja2 Templates
- HTML/CSS/JavaScript

### Environment Variables
- `OPENAI_API_KEY`: API key for OpenAI
- `ANTHROPIC_API_KEY`: API key for Anthropic (optional)
- `LLM_MODEL`: Model to use (default: gpt-4)
- `LLM_PROVIDER`: Provider to use (default: openai)
- `TINYDB_PATH`: Path to TinyDB database file

## Changelog

### 2023-10-15
- Initial project setup
- Created FastAPI application structure
- Implemented basic chat handler

### 2023-10-20
- Added LiteLLM integration
- Implemented conversation history management
- Created web interface

### 2023-11-05
- Added budget and timeline guidance tools
- Implemented lead extraction logic
- Added TinyDB integration for data persistence

### 2023-11-15
- Added unit and integration tests
- Improved error handling
- Enhanced documentation

### 2023-12-01
- Replaced Firebase with TinyDB for local database storage
- Simplified deployment process
- Added database initialization script

### 2023-12-15
- Improved conversation flow
- Enhanced lead extraction accuracy
- Added more comprehensive testing

### 2024-01-10
- Removed Firebase-related files and dependencies
- Updated environment variable handling
- Improved error logging

### 2024-01-25
- Removed Firebase integration tests
- Added TinyDB-specific tests
- Updated documentation

### 2024-03-05
- Fixed database initialization issues
- Improved path handling for database files
- Enhanced logging for better debugging

### 2024-03-10
- Updated all documentation files to replace Firebase references with TinyDB
- Renamed firebase_integration.md to tinydb_integration.md
- Updated test files to use DatabaseHandler instead of FirebaseHandler

## Getting Started

### Prerequisites
- Python 3.11 or higher
- API key for OpenAI or Anthropic

### Installation
1. Clone the repository
2. Create a virtual environment: `python -m venv venv`
3. Activate the virtual environment:
   - Windows: `venv\Scripts\activate`
   - Unix/MacOS: `source venv/bin/activate`
4. Install dependencies: `pip install -r requirements.txt`
5. Create a `.env` file with required environment variables
6. Initialize the database: `python app/db_init.py`

### Running the Application
1. Start the server: `uvicorn app.main:app --reload`
2. Open a web browser and navigate to `http://localhost:8000`

### Running Tests
- Run all tests: `pytest`
- Run unit tests: `pytest tests/unit`
- Run integration tests: `pytest tests/integration`
- Run end-to-end tests: `pytest tests/e2e`

## Project Structure
- `/app`: Main application code
  - `main.py`: FastAPI application entry point
  - `chat_handler.py`: Handles chat processing and LLM integration
  - `database_handler.py`: TinyDB integration for data storage
  - `guidance_tools.py`: Tools for retrieving budget and timeline guidance
  - `db_init.py`: Database initialization script
  - `/langflow`: LangFlow pipeline implementation
  - `/static`: Frontend assets (CSS, JS, images)
  - `/templates`: Frontend HTML templates
- `/data`: Data files
  - `seed_data.json`: Initial seed data for the database
- `/docs`: Project documentation
  - `/design`: Design documentation
  - `/api`: API documentation
  - `/test`: Test documentation
  - `/development`: Development guides
  - `/usage`: Usage guides
- `/tests`: Test files
  - `test_tinydb.py`: Test script for TinyDB implementation
  - `/unit`: Unit tests
  - `/integration`: Integration tests
  - `/e2e`: End-to-end tests
- `/venv`: Python virtual environment (Python 3.11)
- `.env`: Environment variables (created from .env.example)
- `requirements.txt`: Project dependencies

## Requirements
- Python 3.11
- FastAPI
- Uvicorn
- LiteLLM
- TinyDB
- Pydantic
- LangFlow

## Development Roadmap
1. Environment Setup (Completed)
2. Core Components Implementation (Completed)
   - Implement chat handler
   - Implement TinyDB integration
   - Implement guidance tools
3. LangFlow Pipeline Setup
4. FastAPI Backend Development
5. Frontend Implementation
6. Testing and Refinement

## Notes
- The project uses Python 3.11 for compatibility with all dependencies
- LiteLLM is used for LLM integration
- TinyDB is used for local data storage
- FastAPI is used for the backend
- LangFlow is used for the pipeline implementation
- Database files are excluded from version control to prevent conflicts
- Seed data is provided for initial database setup 